[tools]
go = "latest"
golangci-lint = "latest"
gotestsum = "latest"

[env]
_.file = ".env.yaml"

[tasks.bump-deps]
description = "update all dependencies"
run = '''
  echo "Saving current go version"
  current_go_version=$(mise ls -cl go --json | jq -r '.[].version')
  echo "Current go version is ${current_go_version}"
  echo "Updating all dependencies..."
  mise up
  echo "Removing go.mod go.sum entries for 'go' directive..."
  sed -i "/^go .*/d" go.mod
  echo "Re-installing tools..."
  mise install
  echo "Updating GOROOT"
  new_go_version=$(mise ls -cl go --json | jq -r '.[].version')
  export GOROOT=$(echo "${goroot}" | sed s'/$current_go_version/$new_go_version/')
  echo "New GOROOT is ${GOROOT}"
  echo "Updating go.mod and go.sum files..."
  go get -u ./...
  echo "Cleaning up go.mod and go.sum files..."
  go mod tidy
'''

[tasks.format]
description = "format"
run = 'find . -name "*.go" -exec go fmt {} \;'

[tasks.format-diff]
description = "format git diff"
run = 'git fetch origin && for f in $(git diff --name-only origin/main | grep .go); do [[ -f ${f} ]] && go fmt ${f} || echo "ignoring removed file ${f}"; done'

[tasks.lint]
description = "lint"
depends = ["check-mocks-in-tests-only"]
run = "golangci-lint run"

[tasks.check-mocks-in-tests-only]
description = "Check mocks are only imported in test files"
run = """
if git grep internal/testutils/mocks | cut -d':' -f1 | grep -vE 'mise.toml|_test.go$' >/dev/null; then
  echo 'mocks package should not be imported outside of test files, fix those files : '
  git grep internal/testutils/mocks | cut -d':' -f1 | grep -vE 'mise.toml|_test.go$' | uniq
else
  echo 'OK : mock package not imported outside of test files'
fi
"""

[tasks.test]
description = "test"
run = "gotestsum --format testname"

[tasks.coverage]
description = "Print a test coverage report"
run = 'go test -coverprofile=coverage.out ./... >/dev/null 2>&1; sed -i "/internal\/testutils/d" coverage.out; go tool cover -func=coverage.out | grep -v "100.0%"; rm coverage.out'
